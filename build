#!/bin/bash -x

# ./build		# build the container from scratch, set environment 
#			# variables.

IMAGE=jdonato1/jupyter-python
CONTAINER=jupyter-notebook-python
PORT=8000
TAG=bionic
MNT_VOLUME=$HOME/jupyter		# jupyter folder on host 
JUPYTER_TOKEN_VOLUME=$HOME/.jupyter	# jupyter credentials for user on host

########################## TensorFlow ##########################
###
### Use a Python 3 wheel file to install tensorflow.  This is very
### useful for older Intel CPUs that do not support the AVX2
### CPU instruction set.
###
### For older CPUs, I have built a binary product.  The binary can be built
### by running the Docker Hub container "jdonato1/tensorflow-from-source" 
### and it takes a very long time to compile.  The binary result can be 
### downloaded and installed right away.
###	
###   https://github.com/jdonato1/tensorflow-from-source/tree/master/build_product
###
# export TENSORFLOW_WHEEL=tensorflow-1.11.0-cp36-cp36m-linux_x86_64.whl
export TENSORFLOW_WHEEL="tensorflow-1.12.0rc0-cp36-cp36m-linux_x86_64.whl"
#
### The default of this script is to install tensorflow from wheel file.
### To *NOT* install tensorflow (Keras defaults to theano), uncomment the
### next line:
# export NO_TENSORFLOW=true


# --- Do not edit below this line ---
export UID=`id -u`
export GID=`id -g`

# Create
mkdir -p "$MNT_VOLUME"
mkdir -p "$JUPYTER_TOKEN_VOLUME"
docker rm -f $CONTAINER ; \
	docker build -t $IMAGE:latest -t $IMAGE:$TAG \
		--build-arg NO_TENSORFLOW=$NO_TENSORFLOW \
		--build-arg TENSORFLOW_WHEEL=$TENSORFLOW_WHEEL \
		--build-arg UID=$UID \
		--build-arg GID=$GID \
		"$@" \
		. && \
	set -x && \
	docker run \
		--name $CONTAINER \
		-it \
		-p $PORT:$PORT \
		-v "$MNT_VOLUME:/home/jupyter" \
		-v "$JUPYTER_TOKEN_VOLUME:/home/jupyter/.jupyter" \
		$IMAGE 

